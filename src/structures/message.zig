    //! ISC License
    //!
    //! Copyright (c) 2024-2025 Yuzu
    //!
    //! Permission to use, copy, modify, and/or distribute this software for any
    //! purpose with or without fee is hereby granted, provided that the above
    //! copyright notice and this permission notice appear in all copies.
    //!
    //! THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    //! REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    //! AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    //! INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    //! LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    //! OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    //! PERFORMANCE OF THIS SOFTWARE.

    const Snowflake = @import("snowflake.zig").Snowflake;
    const User = @import("user.zig").User;
    const Member = @import("member.zig").Member;
    const Attachment = @import("attachment.zig").Attachment;
    const Application = @import("application.zig").Application;
    const Embed = @import("embed.zig").Embed;
    const AllowedMentionTypes = @import("shared.zig").AllowedMentionsTypes;
    const PremiumTypes = @import("shared.zig").PremiumTypes;
    const InteractionTypes = @import("shared.zig").InteractionTypes;
    const MessageTypes = @import("shared.zig").MessageTypes;
    const Sticker = @import("sticker.zig").Sticker;
    const StickerItem = @import("sticker.zig").StickerItem;
    const StickerPath = @import("sticker.zig").StickerPack;
    const MessageFlags = @import("shared.zig").MessageFlags;
    const Emoji = @import("emoji.zig").Emoji;
    const Poll = @import("poll.zig").Poll;
    const AvatarDecorationData = @import("user.zig").AvatarDecorationData;
    const MessageActivityTypes = @import("shared.zig").MessageActivityTypes;
    const Partial = @import("partial.zig").Partial;
    const MessageComponent = @import("component.zig").MessageComponent;

    /// https://discord.com/developers/docs/resources/channel#message-object
    pub const Message = struct {
        /// id of the message
        id: Snowflake,
        /// id of the channel the message was sent in
        channel_id: Snowflake,
        ///
        /// id of the guild the message was sent in
        /// Note: For MESSAGE_CREATE and MESSAGE_UPDATE events, the message object may not contain a guild_id or member field since the events are sent directly to the receiving user and the bot who sent the message, rather than being sent through the guild like non-ephemeral messages.,
        ///
        guild_id: ?Snowflake = null,
        ///
        /// The author of this message (not guaranteed to be a valid user)
        /// Note: The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user. If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar. You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.,
        ///
        author: User,
        ///
        /// Member properties for this message's author
        /// Note: The member object exists in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events from text-based guild channels. This allows bots to obtain real-time member data without requiring bots to store member state in memory.,
        ///
        member: ?Member = null,
        /// Contents of the message
        content: ?[]const u8 = null,
        /// When this message was sent
        timestamp: []const u8,
        /// When this message was edited (or null if never)
        edited_timestamp: ?[]const u8 = null,
        /// Whether this was a TTS message
        tts: bool,
        /// Whether this message mentions everyone
        mention_everyone: bool,
        ///
        /// Users specifically mentioned in the message
        /// Note: The user objects in the mentions array will only have the partial member field present in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events from text-based guild channels.,
        ///
        mentions: []User,
        /// Roles specifically mentioned in this message
        mention_roles: ?[][]const u8 = null,
        ///
        /// Channels specifically mentioned in this message
        /// Note: Not all channel mentions in a message will appear in `mention_channels`. Only textual channels that are visible to everyone in a discoverable guild will ever be included. Only crossposted messages (via Channel Following) currently include `mention_channels` at all. If no mentions in the message meet these requirements, this field will not be sent.,
        ///
        mention_channels: ?[]ChannelMention = null,
        /// Any attached files
        attachments: []Attachment,
        /// Any embedded content
        embeds: []Embed,
        /// Reactions to the message
        reactions: ?[]Reaction = null,
        // Used for validating a message was sent
        //    nonce: ?union(enum) {int: isize,string: []const u8,} = null,
        /// Whether this message is pinned
        pinned: bool,
        /// If the message is generated by a webhook, this is the webhook's id
        webhook_id: ?Snowflake = null,
        /// Type of message
        type: MessageTypes,
        /// Sent with Rich Presence-related chat embeds
        activity: ?MessageActivity = null,
        /// Sent with Rich Presence-related chat embeds
        application: ?Partial(Application) = null,
        /// if the message is an Interaction or application-owned webhook, this is the id of the application
        application_id: ?Snowflake = null,
        // Data showing the source of a crosspost, channel follow add, pin, or reply message
        //    message_reference: ?Omit(MessageReference, .{"failIfNotExists"}) = null,
        /// Message flags combined as a bitfield
        flags: ?MessageFlags = null,
        ///
        /// The stickers sent with the message (bots currently can only receive messages with stickers, not send)
        /// @deprecated
        ///
        stickers: ?[]Sticker = null,
        ///
        /// The message associated with the `message_reference`
        /// Note: This field is only returned for messages with a `type` of `19` (REPLY). If the message is a reply but the `referenced_message` field is not present, the backend did not attempt to fetch the message that was being replied to, so its state is unknown. If the field exists but is null, the referenced message was deleted.,
        /// TAKES A POINTER
        referenced_message: ?*Message = null,
        /// The message associated with the `message_reference`. This is a minimal subset of fields in a message (e.g. `author` is excluded.)
        message_snapshots: ?[]MessageSnapshot = null,
        /// sent if the message is sent as a result of an interaction
        interaction_metadata: ?MessageInteractionMetadata = null,
        ///
        /// Sent if the message is a response to an Interaction
        ///
        /// @deprecated Deprecated in favor of {@link interaction_metadata};
        ///
        interaction: ?MessageInteraction = null,
        // The thread that was started from this message, includes thread member object
        //    thread: ?Omit(Channel, .{"member"}), //& { member: ThreadMember }; = null,
        /// The components related to this message
        components: ?[]MessageComponent = null,
        /// Sent if the message contains stickers
        sticker_items: ?[]StickerItem = null,
        /// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with `total_message_sent` on parent thread
        position: ?isize = null,
        /// The poll object
        poll: ?Poll = null,
        /// The call associated with the message
        call: ?MessageCall = null,
    };

    /// https://discord.com/developers/docs/resources/channel#message-call-object
    pub const MessageCall = struct {
        /// Array of user object ids that participated in the call
        participants: [][]const u8,
        /// Time when call ended
        ended_timestamp: []const u8,
    };

    /// https://discord.com/developers/docs/resources/channel#channel-mention-object
    pub const ChannelMention = struct {
        /// id of the channel
        id: Snowflake,
        /// id of the guild containing the channel
        guild_id: Snowflake,
        /// The type of channel
        type: isize,
        /// The name of the channel
        name: []const u8,
    };

    /// https://discord.com/developers/docs/resources/channel#reaction-object
    pub const Reaction = struct {
        /// Total isize of times this emoji has been used to react (including super reacts)
        count: isize,
        ///
        count_details: ReactionCountDetails,
        /// Whether the current user reacted using this emoji
        me: bool,
        ///
        me_burst: bool,
        /// Emoji information
        emoji: Partial(Emoji),
        /// HEX colors used for super reaction
        burst_colors: [][]const u8,
    };

    /// https://discord.com/developers/docs/resources/channel#get-reactions-reaction-types
    pub const ReactionType = enum {
        Normal,
        Burst,
    };

    /// https://discord.com/developers/docs/resources/channel#reaction-count-details-object
    pub const ReactionCountDetails = struct {
        /// Count of super reactions
        burst: isize,
        ///
        normal: isize,
    };

    /// https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure
    pub const MessageActivity = struct {
        /// Type of message activity
        type: MessageActivityTypes,
        /// `party_id` from a Rich Presence event
        party_id: ?Snowflake = null,
    };

    /// https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure
    pub const MessageReference = struct {
        /// Type of reference
        type: ?MessageReferenceType = null,
        /// id of the originating message
        message_id: ?Snowflake = null,
        ///
        /// id of the originating message's channel
        /// Note: `channel_id` is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.,
        ///
        channel_id: ?Snowflake = null,
        /// id of the originating message's guild
        guild_id: ?Snowflake = null,
        /// When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
        fail_if_not_exists: bool,
    };

    /// https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-types
    pub const MessageReferenceType = enum {
        ///
        /// A standard reference used by replies.
        ///
        /// @remarks
        /// When the type is set to this value, the field referenced_message on the message will be present
        ///
        Default,
        ///
        /// Reference used to point to a message at a point in time.
        ///
        /// @remarks
        /// When the type is set to this value, the field message_snapshot on the message will be present
        ///
        /// This value can only be used for basic messages;
        /// i.e. messages which do not have strong bindings to a non global entity.
        /// Thus we support only messages with `DEFAULT` or `REPLY` types, but disallowed if there are any polls, calls, or components.
        ///
        Forward,
    };

    /// https://discord.com/developers/docs/resources/channel#message-snapshot-object-message-snapshot-structure
    pub const MessageSnapshot = struct {
        /// https://discord.com/developers/docs/resources/channel#message-object
        /// Minimal subset of fields in the forwarded message
        message: struct {
        content: ?[]const u8 = null,
            timestamp: []const u8,
        edited_timestamp: ?[]const u8 = null,
            mentions: []struct {
                username: []const u8,
        global_name: ?[]const u8 = null,
        locale: ?[]const u8 = null,
        flags: ?isize = null,
        premium_type: ?PremiumTypes = null,
        public_flags: ?isize = null,
        accent_color: ?isize = null,
                id: Snowflake,
                discriminator: []const u8,
        avatar: ?[]const u8 = null,
        bot: ?bool = null,
        system: ?bool = null,
        mfa_enabled: ?bool = null,
        verified: ?bool = null,
        email: ?[]const u8 = null,
        banner: ?[]const u8 = null,
        avatar_decoration_data: ?AvatarDecorationData = null,
        member: ?Partial(Member) = null,
            },
        mention_roles: ?[][]const u8 = null,
            type: MessageTypes,
        flags: ?MessageFlags = null,
        stickers: ?[]Sticker = null,
        components: ?[]MessageComponent = null,
        sticker_items: ?[]StickerItem = null,
            attachments: []Attachment,
            embeds: []Embed,
        },
    };

    /// https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object-message-interaction-structure
    pub const MessageInteraction = struct {
        /// Id of the interaction
        id: Snowflake,
        /// The type of interaction
        type: InteractionTypes,
        /// The name of the ApplicationCommand including the name of the subcommand/subcommand group
        name: []const u8,
        /// The user who invoked the interaction
        user: User,
        /// The member who invoked the interaction in the guild
        member: ?Partial(Member) = null,
    };

    /// https://discord.com/developers/docs/resources/channel#message-interaction-metadata-object-message-interaction-metadata-structure
    pub const MessageInteractionMetadata = struct {
        /// Id of the interaction
        id: Snowflake,
        /// The type of interaction
        type: InteractionTypes,
        /// User who triggered the interaction
        user: User,
        // IDs for installation context(s) related to an interaction
        // authorizing_integration_owners: Partial(AutoArrayHashMap(ApplicationIntegrationType, []const u8)),
        /// ID of the original response message, present only on follow-up messages
        original_response_message_id: ?Snowflake = null,
        /// ID of the message that contained interactive component, present only on messages created from component interactions
        interacted_message_id: ?Snowflake = null,
        /// Metadata for the interaction that was used to open the modal, present only on modal submit interactions
        /// TAKES A POINTER
        triggering_interaction_metadata: ?*MessageInteractionMetadata = null,
    };

    pub const AllowedMentions = struct {
        /// An array of allowed mention types to parse from the content.
        parse: []AllowedMentionTypes,
        /// Array of role_ids to mention (Max size of 100)
        roles: []Snowflake,
        /// Array of user_ids to mention (Max size of 100)
        users: []Snowflake,
        /// For replies, whether to mention the author of the message being replied to (default false)
        replied_user: ?bool = null,
    };

    pub const GetMessagesQuery = struct {
        /// Get messages around this message ID,
        around: ?Snowflake = null,
        ///  Get messages before this message ID
        before: ?Snowflake = null,
        /// Get messages after this message ID
        after: ?Snowflake = null,
        /// Max number of messages to return (1-100),
        limit: ?usize = null,
};
